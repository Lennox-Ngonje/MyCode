
// noinspection JSCheckFunctionSignatures
(function ($) {
    'use strict';
    $('.gomycode-availability-button-disabled').attr('disabled', true);
    $(document).ready(function () {
        $('.gomycode-availability-button-disabled').removeAttr('disabled');
        $('.gomycode-availability-button').attr('disabled', false);
        let messages = $edumallLogin.validatorMessages;
        let $contact = null;
        let $isSignup = null;
        let $gomycodeAvailabilityData = null;
        $(".hackerspace").change(function () {
            let hackerspaceId = $(this).children(":selected").attr("id");
            let hackerspace = $(this).val();
            if ($contact) {
                $contact.hackerspace = hackerspace;
                $contact.hackerspaceId = hackerspaceId;
            }
            $('.hackerspace-id').val(hackerspaceId);
            $('.hackerspace-name').val(hackerspace);
        });
        jQuery.extend(jQuery.validator.messages, {
            required: messages.required,
            email: messages.email,
            date: messages.date,
            dateISO: messages.dateISO,
            number: messages.number,
            digits: messages.digits,
            creditcard: messages.creditcard,
            equalTo: messages.equalTo,
            accept: messages.accept,
            maxlength: jQuery.validator.format(messages.maxlength),
            minlength: jQuery.validator.format(messages.minlength),
            rangelength: jQuery.validator.format(messages.rangelength),
            range: jQuery.validator.format(messages.range),
            max: jQuery.validator.format(messages.max),
            min: jQuery.validator.format(messages.min)
        });

        let $learnBaseApi = gmc_options.gmc_learn_base_url;
        let $restBaseApi = gmc_options.gmc_rest_base_url;

        let $body = $('body');
        let $availabilityCheckForm = $('.gomycode-availability-check-form');
        let $signupForm = $('.gomycode-availability-signup-form');
        let $noOpeningForm = $('.gomycode-availability-no-opening-form');
        let $timeslotsForm = $('.gomycode-availability-timeslots');
        let $hackerspaceName = $('.hackerspace-name');
        let $studentName = $('.gomycode-availability-student-name');
        let $popupAvailabilityCheckerPreLoader = $('#popup-pre-loader');
        let $popupAvailabilityChecker = $('#popup-availability-checker');
        let $availabilityCheckerSignupForm = $popupAvailabilityChecker.find('#gomycode-availability-signup-form');
        let $nextSessionDate = $('.gomycode-check-availability-next-session-date');
        let $signupSubmitButton = $signupForm.find('button[type="submit"]');
        let $availabilityCheckSubmitButton = $availabilityCheckForm.find('button[type="submit"]');
        let $noOpeningFormSubmitButton = $noOpeningForm.find('button[type="submit"]');
        let $timeslotsSubmitButton = $timeslotsForm.find('button[type="submit"]');
        let $signupErrorMessage = $signupForm.find('.form-response-messages');
        let $timeslotsErrorMessage = $timeslotsForm.find('.form-response-messages');
        let $availabilityCheckErrorMessage = $availabilityCheckForm.find('.form-response-messages');
        let $trackIdInput = $('.track_id');
        let $addToCartForm = $('.gomycode-availability-cart');

        // This function sets a delay for the animations of the loader dots
        setInterval(function () {
            $(".next-session-start-date-loader-dot").each(function (index) {
                $(this).css("animation-delay", index * 0.2 + "s");
            });
        }, 600);

        // This function formats the date received from the server in a user-friendly format
        function _parse_session_date(dateString) {
            const dateParts = dateString.split(/[-T:+]/);
            const year = parseInt(dateParts[0]);
            const month = parseInt(dateParts[1]) - 1; // Months are zero-indexed
            const day = parseInt(dateParts[2]);
            const hour = parseInt(dateParts[3]);
            const minute = parseInt(dateParts[4]);
            const offsetMinutes = parseInt(dateParts[6]);

            const originalDate = new Date(Date.UTC(year, month, day, hour, minute));
            originalDate.setMinutes(originalDate.getMinutes() + offsetMinutes);

            const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            const dayOfWeek = daysOfWeek[originalDate.getUTCDay()];
            const dayOfMonth = originalDate.getUTCDate();
            const monthName = monthNames[originalDate.getUTCMonth()];

            const suffixes = ["th", "st", "nd", "rd", "th",
                "th", "th", "th", "th", "th"];
            let suffix;

            if (dayOfMonth % 100 >= 11 && dayOfMonth % 100 <= 13) {
                suffix = "th"; // Use "th" for 11, 12, and 13
            } else {
                const lastDigit = dayOfMonth % 10;
                suffix = suffixes[lastDigit]; // Use the appropriate suffix based on the last digit
            }
            return `${dayOfWeek}, ${dayOfMonth}${suffix} ${monthName}`;
        }

        let $loaderSelector = $('.next-session-start-date-loader');

        // If the element with the specific class and track ID exist, make an AJAX request to the API
        if ($('.gomycode-availability-next-session-start-date').length && $trackIdInput.val()) {
            $.ajax({
                url: $learnBaseApi +
                    "/external-services/" +
                    "locations/" +
                    "tracks/" +
                    $trackIdInput.val() +
                    "/" +
                    "availabilities?country=" + gmc_options.current_gmc_country,
                type: 'GET',
                cache: false,
                dataType: 'json',
                success: function (response) {
                    // Hide the loader
                    $loaderSelector.hide();
                    // If there was an error, log the error message to the console
                    if (response.didError) {
                        console.error(response.errorMessage);
                    } else {
                        // If there are no training sessions, log an error message to the console
                        if (!response.model.length) {
                            $('p:contains("Next session starts on")').parent().parent().remove();
                            $('.gomycode-availability-next-session-start-date').remove();
                        } else {
                            // Otherwise, format the date and set the text of the element to the formatted date
                            $('.gomycode-availability-next-session-start-date').text(_parse_session_date(response.model[0].opening.startDate))
                        }
                    }
                },
                error: function () {
                    // Hide the loader
                    $loaderSelector.hide();
                    // Log the error message to the console
                    console.error(response.errorMessage);
                }
            });
        }
        let $downloadLink = $('.gomycode-availability-download-link-value');
        // If there is a download link which should be defined if the download link widget used
        if ((typeof $downloadLink !== 'undefined') && $downloadLink.val()) {
            // Call the signup function
            $body.on('click', '.gomycode-availability-download-link', function (e) {
                e.preventDefault();
                e.stopPropagation();
                // Pass the download link to the signup function to redirect to the file link
                gomycodeAvailabilitySignup($downloadLink.val());
            });
        }

        $addToCartForm.find('.gomycode-availability-button').attr("style", "display: block !important");

        $('.edumall-popup').EdumallPopup();

        function _parseValidationErrors($response) {
            if ($response.data.hasOwnProperty("details") && $response.data.details.hasOwnProperty('validationResults') && ($response.data.details.validationResults instanceof Array)) {
                let $message = "<hr>";
                $.each($response.data.details.validationResults, function (index, elem) {
                    $message += elem.message + "<hr>";
                });
                return $message;
            }
            return "";
        }

        function deparam(query) {
            let pairs, i, keyValuePair, key, value, map = {};
            // remove leading question mark if it's there
            if (query.slice(0, 1) === '?') {
                query = query.slice(1);
            }
            if (query !== '') {
                pairs = query.split('&');
                for (i = 0; i < pairs.length; i += 1) {
                    keyValuePair = pairs[i].split('=');
                    key = decodeURIComponent(keyValuePair[0]);
                    value = (keyValuePair.length > 1) ? decodeURIComponent(keyValuePair[1]) : undefined;
                    map[key] = value;
                }
            }
            return map;
        }

        $contact = localStorage.getItem("hubspot-contact-created");
        $gomycodeAvailabilityData = localStorage.getItem("gomycode-availability-data");
        $gomycodeAvailabilityData = $gomycodeAvailabilityData ? JSON.parse($gomycodeAvailabilityData) : null;
        if ($gomycodeAvailabilityData) {
            $nextSessionDate.html(_parse_session_date($gomycodeAvailabilityData[0].opening.startDate));
        }
        if ($contact !== null) {
            $.each($contact.split('&'), function (index, elem) {
                let inputs = elem.split('=');
                let currentInput = $("[name='" + inputs[0] + "']");
                let currentValue = decodeURIComponent(inputs[1].replace(/\+/g, ' '));
                if (!currentInput.is("select") && currentValue && (currentInput.val() === "")) {
                    currentInput.val(currentValue)
                }
            });
            $contact = deparam($contact);
            $studentName.html($contact.full_name.split(' ').shift());
        }

        $body.on('click', '.gomycode_availability_cancel_cta', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $popupAvailabilityChecker.EdumallPopup('close');
        });

        $body.on('click', '.gomycode_availability_check_btn', function (e) {
            e.preventDefault();
            e.stopPropagation();
            gomycodeAvailabilityCheck();
        });

        $body.on('click', '.gomycode_availability_check_btn_no_opening', function (e) {
            e.preventDefault();
            e.stopPropagation();
            noOpeningToTimeslots("no-opening");
        });

        $('.e-checkout__container').parent().one('submit', function (e) {
            e.preventDefault();
            e.stopPropagation();
            gomycodeAvailabilityCreateDeal();
            $(this).submit();
        });

        $body.on('click', '#gomycode_availability_add_to_cart_btn', function (e) {
            e.preventDefault();
            e.stopPropagation();
            gomycodeAvailabilityGoToCheckout();
        });

        $body.on('click', '.gomycode-availability-button', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $addToCartForm = $(this).parents('form:first');
            $isSignup = $addToCartForm.find('.is_signup').val() === 'yes';
            $trackIdInput = $addToCartForm.find('.track_id');
            if ($trackIdInput.val() && ($trackIdInput.val() !== "")) {
                gomycodeAvailabilitySignup();
            } else {
                _resetSubscription(e, false);
            }
        });

        function _closePopup() {
            $popupAvailabilityChecker.EdumallPopup('close');
            $popupAvailabilityChecker.removeClass('popup-loaded');
            $noOpeningForm.hide();
            $timeslotsForm.hide();
            $availabilityCheckForm.hide();
            $signupForm.hide();
        }

        function _resetSubscription(e, hard = true) {
            e.preventDefault();
            e.stopPropagation();
            $popupAvailabilityChecker.EdumallPopup('close');
            $popupAvailabilityChecker.removeClass('popup-loaded');
            $noOpeningForm.hide();
            $timeslotsForm.hide();
            $availabilityCheckForm.hide();
            $signupSubmitButton.removeClass('updating-icon').attr('disabled', false);
            $signupForm.show();
            if (hard) {
                localStorage.removeItem('gomycode-availability-data');
                $gomycodeAvailabilityData = null;
                localStorage.removeItem('hubspot-contact-created');
                $contact = null;
                handlerAvailabilityChecker();
            } else {
                gomycodeAvailabilitySignup();
            }
        }

        $body.on('click', '.gomycode_availability_reset_cta', function (e) {
            _resetSubscription(e);
        });

        function addDays(stringDate, days) {
            return new Date(stringDate);
        }

        function _addActivity($activity, $hackerspace) {
            let $data = {
                "contact": $contact,
                "activity": $activity,
            };
            if ($hackerspace) {
                $data.hackerspace = $hackerspace;
            }
            $.ajax({
                url: $restBaseApi + "/add-activity",
                type: 'POST',
                cache: false,
                dataType: 'json',
                data: $data,
                success: function () {
                    console.info('Activity created : ' + $activity);
                }, error: function (MLHttpRequest) {
                    let response = MLHttpRequest.responseJSON;
                    console.error(response.message + _parseValidationErrors(response));
                }
            });
        }

        function _checkAvailability($downloadLink = false) {
            $.ajax({
                url: $learnBaseApi +
                    "/external-services/" +
                    "locations/" +
                    $contact.hackerspaceId +
                    "/" +
                    "tracks/" +
                    $trackIdInput.val() +
                    "/" +
                    "availabilities",
                type: 'GET',
                cache: false,
                dataType: 'json',
                success: function (response) {
                    _addActivity('availability_checked', $contact.hackerspace);
                    if (response.didError) {
                        localStorage.removeItem('gomycode-availability-data');
                        $gomycodeAvailabilityData = null;
                        $signupErrorMessage.html(response.errorMessage).addClass('error').show();
                    } else {
                        if ($downloadLink) {
                            $signupForm.hide();
                            $popupAvailabilityChecker.EdumallPopup('close');
                            window.open($downloadLink, '_blank');
                        } else {
                            if (!response.model.length) {
                                $.ajax({
                                    url: $learnBaseApi +
                                        "/external-services/locations/tracks/" +
                                        $trackIdInput.val() +
                                        "/availabilities?country=" +
                                        gmc_options.current_gmc_country,
                                    type: 'GET',
                                    cache: false,
                                    dataType: 'json',
                                    success: function (response) {
                                        localStorage.removeItem('gomycode-availability-data');
                                        $gomycodeAvailabilityData = null;
                                        $signupForm.hide();
                                        $noOpeningFormSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                        $('.no-opening-container').html(_noOpeningRows(response.model));
                                        $noOpeningForm.show();
                                    }, error: function (MLHttpRequest) {
                                        let response = MLHttpRequest.responseJSON;
                                        $signupErrorMessage.html(response.message + _parseValidationErrors(response)).addClass('error').show();
                                    },
                                    beforeSend: function () {
                                        $signupErrorMessage.html('').removeClass('error success').hide();
                                        $signupSubmitButton.addClass('updating-icon').attr('disabled', true);
                                    },
                                    complete: function () {
                                        $signupSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                    }
                                });
                            } else {
                                //todo: add capacity
                                localStorage.setItem('gomycode-availability-data', JSON.stringify(response.model));
                                $gomycodeAvailabilityData = response.model;
                                $nextSessionDate.html(_parse_session_date($gomycodeAvailabilityData[0].opening.startDate));
                                $signupForm.hide();
                                $availabilityCheckSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                $availabilityCheckForm.show();
                            }
                        }
                    }
                }, error: function (MLHttpRequest) {
                    localStorage.removeItem('gomycode-availability-data');
                    $gomycodeAvailabilityData = null;
                    let response = MLHttpRequest.responseJSON;
                    $signupErrorMessage.html(response.errorMessage).addClass('error').show();
                },
                beforeSend: function () {
                    $signupErrorMessage.html('').removeClass('error success').hide();
                    $signupSubmitButton.addClass('updating-icon');
                },
                complete: function () {
                    $signupSubmitButton.removeClass('updating-icon').attr('disabled', false);
                }
            });
        }

        function gomycodeAvailabilitySignup($downloadLink = false) {
            let $activity = "";
            if ($isSignup && $contact) {
                $activity = "signup";
            } else if ($downloadLink && $contact) {
                $activity = "download";
            } else if ($contact) {
                $activity = "add_to_cart";
            }
            if ($activity !== "") {
                _addActivity($activity);
            }
            if ($contact && $downloadLink) {
                $signupForm.hide();
                $popupAvailabilityChecker.EdumallPopup('close');
                window.open($downloadLink, '_blank');
                return;
            }
            $.ajax({
                url: $learnBaseApi + "/external-services/locations?locationCountry=" + gmc_options.current_gmc_country,
                type: 'GET',
                cache: false,
                dataType: 'html',
                data: {},
                success: function (response) {
                    response = JSON.parse(response);
                  let $hackerspaceSelect = $('.hackerspace');
                    $hackerspaceSelect.empty(); // Clear existing options before adding new ones
                    $.each(response.model, function (i, item) {
                    // Check if the option already exists before appending
                            if (!$hackerspaceSelect.find('option[value="' + item.name + '"]').length) {
                                    $hackerspaceSelect.append($('<option>', {
                                value: item.name,
                                text: item.name,
                                class: item.id,
                                id: item.id,
            }));
        }
    });
                    if ($contact) {
                        $('.' + $contact.hackerspaceId).attr('selected', true);
                        $hackerspaceName.html($contact.hackerspace);
                    } else {
                        $('.hackerspace-id').val($signupForm.find('.hackerspace').children(":selected").attr("id"));
                        $hackerspaceName.html($signupForm.find('.hackerspace').children(":selected").val());
                    }
                    $popupAvailabilityChecker.addClass('popup-loaded');
                    $popupAvailabilityChecker.EdumallPopup('open');
                    if (!$contact || !$gomycodeAvailabilityData) {
                        $availabilityCheckerSignupForm.validate({
                            rules: {
                                full_name: {
                                    required: true
                                }, email: {
                                    required: true,
                                    email: true,
                                }, phone_number: {
                                    required: true,
                                    number: true,
                                }, hackerspace: {
                                    required: true,
                                }
                            }, submitHandler: function () {
                                $signupSubmitButton.show();
                                if ($signupSubmitButton.attr('disabled') === true) {
                                    return false;
                                }
                                $signupSubmitButton.attr('disabled', true);

                                //Ilene slimen code
                                let hackerspaceValue = $('.hackerspace').val(); // Get the selected value from the dropdown
                                // Check if hackerspaceValue is empty, if so, set a default value
                                if (!hackerspaceValue) {
                                    hackerspaceValue = $('.hackerspace option:first').val(); // Set default value as the first option's value
                                }
                                // Update the hidden field and hackerspaceName accordingl
                                $('.hackerspace-name').val(hackerspaceValue);
                                $hackerspaceName.html(hackerspaceValue);
                                //End code Ilene Slimen to fix add contact hubspot API failing if user didn't intent to select


                                $.ajax({
                                    url: $restBaseApi + "/add-contact",
                                    type: 'POST',
                                    cache: false,
                                    dataType: 'json',
                                    data: $signupForm.serialize(),
                                    success: function () {
                                        localStorage.setItem('hubspot-contact-created', $signupForm.serialize());
                                        $contact = deparam($signupForm.serialize());
                                        $studentName.html($contact.full_name.split(' ').shift());
                                        $('.' + $contact.hackerspaceId).attr('selected', true);
                                        $hackerspaceName.html($contact.hackerspace);
                                        if (!$isSignup) {
                                            _checkAvailability($downloadLink);
                                        } else {
                                            if ($trackIdInput.val() && ($trackIdInput.val() !== "")) {
                                                _checkAvailability($downloadLink);
                                            } else {
                                                $signupForm.hide();
                                                $popupAvailabilityChecker.EdumallPopup('close');
                                                _addActivity('signup');
                                                Swal.fire(
                                                    'Nice!',
                                                    'Subscribed successfully!',
                                                    'success'
                                                )
                                            }
                                        }
                                    }, error: function (MLHttpRequest) {
                                        let response = MLHttpRequest.responseJSON;
                                        $signupErrorMessage.html(response.message).addClass('error').show();
                                    },
                                    beforeSend: function () {
                                        $signupErrorMessage.html('').removeClass('error success').hide();
                                        $signupSubmitButton.addClass('updating-icon');
                                    },
                                    complete: function () {
                                        $signupSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                    }
                                });
                            }
                        });
                    } else {
                        if ($contact && $downloadLink) {
                            $signupForm.hide();
                            $popupAvailabilityChecker.EdumallPopup('close');
                            window.open($downloadLink, '_blank');
                        } else {
                            $noOpeningForm.hide();
                            $timeslotsForm.hide();
                            $signupForm.hide();
                            $availabilityCheckSubmitButton.removeClass('updating-icon').attr('disabled', false);
                            $availabilityCheckForm.show();
                        }
                    }
                },
                error: function (MLHttpRequest, textStatus, errorThrown) {
                    console.log(errorThrown);
                },
                beforeSend: function () {
                    $popupAvailabilityChecker.EdumallPopup('close');
                    $popupAvailabilityCheckerPreLoader.addClass('open');
                },
                complete: function () {
                    $popupAvailabilityCheckerPreLoader.removeClass('open');
                }
            });
        }

        function _sort_product_timeslots(productTimeSlots) {
            productTimeSlots.sort((a, b) => {
                return a.day - b.day;
            });
            return productTimeSlots;
        }

        let $weekDays = [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
        ]

        function _timeslotsRows($gomycodeAvailabilityData) {
            let $row = "";
            $.each($gomycodeAvailabilityData, function ($availabilityDataIndex, $availabilityData) {
                let $timeslotsDaysTitle = "";
                let $currentWeekDays = $availabilityData.productTimeSlots;
                let $classesclassification = "";
                const [$lastDayKey, $lastDay] = Object.entries($availabilityData.productTimeSlots).pop();
                $.each(_sort_product_timeslots($currentWeekDays), function ($currentTimeslotsIndex, $currentTimeslots) {
                    $timeslotsDaysTitle += $weekDays[$currentTimeslots.day] + ", ";
                });
                if ($timeslotsDaysTitle !== "") {
                    $timeslotsDaysTitle = $timeslotsDaysTitle.substring(0, $timeslotsDaysTitle.length - 2) + " and " + $weekDays[$lastDay.day];
                } else {
                    $timeslotsDaysTitle = $weekDays[$lastDay.day];
                }
                if ($availabilityData.productTimeSlots[0].startTime.substring(0, 2) === "09") {
                    $classesclassification = 'Morning classes';
                } else if ($availabilityData.productTimeSlots[0].startTime.substring(0, 2) === "14") {
                    $classesclassification = 'Afternoon classess';
                } else {
                    $classesclassification = 'Night Classes';
                }
                let x = "";
                $.each(_sort_product_timeslots($availabilityData.productTimeSlots), function ($timeslotsIndex, $timeslots) {
                    if ($timeslots.startTime.substring(0, 2) === "09") {
                        x = 'Morning classes';
                    } else if ($timeslots.startTime.substring(0, 2) === "14") {
                        x = 'Afternoon classess';
                    } else {
                        x = 'Night Classes';
                    }
                    if ($classesclassification !== x) {
                        $classesclassification = "";
                        console.log("$classesclassification", $classesclassification);
                        return;
                    }
                });
                console.log("classesclassification M", $classesclassification);
                $row += "<div class=\"form-group timeslots-block\">\n" +
                    "                                    <div class=\"tutor-course-topics-contents\">\n" +
                    "                                        <div class=\"tutor-course-topic tutor-topics-in-single-lesson tutor-active\">\n" +
                    "                                            <div class=\"tutor-course-lessons\">\n" +
                    "                                                <div class=\"tutor-course-lesson\">\n" +
                    "<table class='timeslots-main-container'><tr class='timeslots-main-container-row'>" +
                    "                                                           <td class=\"timeslots-classification-container\">\n" + "<img src='https://gomycode.com/tn/wp-content/uploads/sites/26/2023/11/Frame.png'/>" +
                    "<p>" + $classesclassification + "</p>" +
                    "                                                            </td>" +
                    "                                                            <td class=\"timeslots-value-container\">\n" +
                    "                                                                <label>\n" +
                    "                                                                    <input class=\"timeslots-input\" type=\"radio\" name=\"timeslot\" " +
                    " data-name=\"" + $availabilityData.productSchedule.name + "\" " +
                    " data-start=\"" + $availabilityData.opening.startDate + "\" " +
                    " data-end=\"" + $availabilityData.opening.dueDate + "\" " +
                    " data-session=\"" + $availabilityData.trainingSession.name + "\" " +
                    " data-timeslots='" + JSON.stringify(_sort_product_timeslots($availabilityData.productTimeSlots)) + "' " +
                    " value=\"" + $availabilityData.productSchedule.name + "\" " +
                    ">\n" +
                    "                                                                </label>\n" +
                    "                                                            </td></tr>" +
                    "<tr class='timeslots-days-container'><td>" +
                    "                                                    <table class=\"gomycode-check-availability-timeslots-table\">\n" +
                    "                                                      \n<tr class='timeslots-days-rows'>";

                $.each(_sort_product_timeslots($availabilityData.productTimeSlots), function ($timeslotsIndex, $timeslots) {

                    $row += "                                                            <td class=\"timeslots-cells\">\n" +
                        "                                                                <span class=\"timeslots-day\">" + $weekDays[$timeslots.day] + "</span>\n" +
                        "                                                                <strong>\n" +
                        "                                                                    <span class=\"timeslots-time-start\">" + $timeslots.startTime.substring(0, 5) + "</span>" +
                        "                                                                    - " +
                        "                                                                    <span class=\"timeslots-time-end\">" + $timeslots.dueTime.substring(0, 5) + "</span>\n" +
                        "                                                                </strong>\n" +
                        "                                                            </td>\n"
                });
                $row += "                                                        </tr>\n" +
                    "                                                    </table>\n" +
                    "</tr></td></table>" +
                    "                                                </div>\n" +
                    "                                            </div>\n" +
                    "                                        </div>\n" +
                    "                                    </div>\n" +
                    "                                </div>";
            });
            return $row;
        }

        function _noOpeningRows($hackerspacesData) {
            let insertedHackerspaces = [];
            let $row = "";
            $.each($hackerspacesData, function ($hackerspaceIndex, $hackerspace) {
                if ($.inArray($hackerspace.location.name, insertedHackerspaces) === -1) {
                    $row +=
                        "<tr class=\"hackerspace-input\">\n" +
                        "    <td class=\"hackerspace-value\">\n" +
                        "        <span class=\"hackerspace-text-value\">" + $hackerspace.location.name + "</span>\n" +
                        "    </td>\n" +
                        "    <td class=\"hackerspace-value\">\n" +
                        "        <label>\n" +
                        "            <input class=\"hackerspace-name-input\" type=\"radio\" name='no-opening-hackerspace' value='" + $hackerspace.location.id + "'>\n" +
                        "        </label>\n" +
                        "    </td>\n" +
                        "</tr>";
                    insertedHackerspaces.push($hackerspace.location.name);
                }
            });
            return $row;
        }

        function noOpeningToTimeslots() {
            let currentHackerspaceId = $('input[name=no-opening-hackerspace]:checked', '.gomycode-availability-no-opening-form').val();
            let currentHackerspace = $('input[name=no-opening-hackerspace]:checked', '.gomycode-availability-no-opening-form').text();
            $contact.hackerspace = currentHackerspace;
            $contact.hackerspaceId = currentHackerspaceId;
            $hackerspaceName.html($contact.hackerspace);
            $noOpeningFormSubmitButton.attr('disabled', true);
            $.ajax({
                url: $learnBaseApi +
                    "/external-services/" +
                    "locations/" +
                    $contact.hackerspaceId +
                    "/" +
                    "tracks/" +
                    $trackIdInput.val() +
                    "/" +
                    "availabilities",
                type: 'GET',
                cache: false,
                dataType: 'json',
                success: function (response) {
                    _addActivity('availability_checked', $contact.hackerspace);
                    if (response.didError) {
                        localStorage.removeItem('gomycode-availability-data');
                        $gomycodeAvailabilityData = null;
                        $('.' + $contact.hackerspaceId).attr('selected', true);
                        $hackerspaceName.html($contact.hackerspace);
                        $availabilityCheckErrorMessage.html(response.errorMessage).addClass('error').show();
                    } else {
                        if (!response.model.length) {
                            $('.' + $contact.hackerspaceId).attr('selected', true);
                            $hackerspaceName.html($contact.hackerspace);
                            localStorage.removeItem('gomycode-availability-data');
                            $gomycodeAvailabilityData = null;
                            $availabilityCheckForm.hide();
                            $signupSubmitButton.removeClass('updating-icon').attr('disabled', false);
                            $signupForm.show();
                        } else {
                            $.ajax({
                                url: $restBaseApi + "/add-contact",
                                type: 'POST',
                                cache: false,
                                dataType: 'json',
                                data: $signupForm.serialize(),
                                success: function () {
                                    $('.' + $contact.hackerspaceId).attr('selected', true);
                                    $hackerspaceName.html($contact.hackerspace);
                                    localStorage.setItem('hubspot-contact-created', $signupForm.serialize());
                                    localStorage.setItem('gomycode-availability-data', JSON.stringify(response.model));
                                    $gomycodeAvailabilityData = response.model;
                                    $nextSessionDate.html(_parse_session_date($gomycodeAvailabilityData[0].opening.startDate));
                                    $availabilityCheckForm.hide();
                                    $noOpeningForm.hide();
                                    $('.timeslots-container').html(_timeslotsRows($gomycodeAvailabilityData));
                                    let $timeslotsBlock = $('.timeslots-block');
                                    $timeslotsBlock.on("click", function () {
                                        console.log('Timeslots switched!');
                                        $timeslotsBlock.removeClass('timeslots-selected');
                                        $('.timeslots-input').prop('checked', false);
                                        $(this).find('.timeslots-input').prop('checked', true);
                                        $(this).addClass('timeslots-selected');
                                    });
                                    $('.timeslots-input:first').attr('checked', true);
                                    $timeslotsBlock.first().addClass('timeslots-selected');
                                    $timeslotsSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                    $timeslotsForm.show();
                                }, error: function (MLHttpRequest) {
                                    let response = MLHttpRequest.responseJSON;
                                    $availabilityCheckErrorMessage.html(response.message + _parseValidationErrors(response)).addClass('error').show();
                                },
                                beforeSend: function () {
                                    $availabilityCheckErrorMessage.html('').removeClass('error success').hide();
                                    $availabilityCheckSubmitButton.addClass('updating-icon');
                                    $noOpeningFormSubmitButton.addClass('updating-icon');
                                },
                                complete: function () {
                                    $availabilityCheckSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                    $noOpeningFormSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                }
                            });
                        }
                    }
                }, error: function (MLHttpRequest) {
                    $('.' + $contact.hackerspaceId).attr('selected', true);
                    $hackerspaceName.html($contact.hackerspace);
                    localStorage.removeItem('gomycode-availability-data');
                    $gomycodeAvailabilityData = null;
                    let response = MLHttpRequest.responseJSON;
                    $availabilityCheckErrorMessage.html(response.errorMessage).addClass('error').show();
                    $noOpeningFormSubmitButton.removeClass('updating-icon').attr('disabled', false);
                },
                beforeSend: function () {
                    $noOpeningFormSubmitButton.addClass('updating-icon');
                }
            });
        }

        function gomycodeAvailabilityCheck() {
            $('.' + $availabilityCheckForm.find('.hackerspace').children(":selected").attr("id")).attr('selected', true);
            $hackerspaceName.html($contact.hackerspace);
            $availabilityCheckSubmitButton.show();
            if ($availabilityCheckSubmitButton.attr('disabled') === true) {
                return false;
            }
            if ($noOpeningFormSubmitButton.attr('disabled') === true) {
                return false;
            }
            $availabilityCheckSubmitButton.attr('disabled', true);
            $noOpeningFormSubmitButton.attr('disabled', true);
            $.ajax({
                url: $learnBaseApi +
                    "/external-services/" +
                    "locations/" +
                    $contact.hackerspaceId +
                    "/" +
                    "tracks/" +
                    $trackIdInput.val() +
                    "/" +
                    "availabilities",
                type: 'GET',
                cache: false,
                dataType: 'json',
                success: function (response) {
                    _addActivity('availability_checked', $contact.hackerspace);
                    if (response.didError) {
                        localStorage.removeItem('gomycode-availability-data');
                        $gomycodeAvailabilityData = null;
                        $('.' + $contact.hackerspaceId).attr('selected', true);
                        $hackerspaceName.html($contact.hackerspace);
                        $availabilityCheckErrorMessage.html(response.errorMessage).addClass('error').show();
                    } else {
                        if (!response.model.length) {
                            $('.' + $contact.hackerspaceId).attr('selected', true);
                            $hackerspaceName.html($contact.hackerspace);
                            localStorage.removeItem('gomycode-availability-data');
                            $gomycodeAvailabilityData = null;
                            $availabilityCheckForm.hide();
                            $noOpeningFormSubmitButton.removeClass('updating-icon').attr('disabled', false);
                            $noOpeningForm.show();
                        } else {
                            $.ajax({
                                url: $restBaseApi + "/add-contact",
                                type: 'POST',
                                cache: false,
                                dataType: 'json',
                                data: $signupForm.serialize(),
                                success: function () {
                                    $('.' + $contact.hackerspaceId).attr('selected', true);
                                    $hackerspaceName.html($contact.hackerspace);
                                    localStorage.setItem('hubspot-contact-created', $signupForm.serialize());
                                    localStorage.setItem('gomycode-availability-data', JSON.stringify(response.model));
                                    $gomycodeAvailabilityData = response.model;
                                    $nextSessionDate.html(_parse_session_date($gomycodeAvailabilityData[0].opening.startDate));
                                    $availabilityCheckForm.hide();
                                    $noOpeningForm.hide();
                                    $('.timeslots-container').html(_timeslotsRows($gomycodeAvailabilityData));
                                    let $timeslotsBlock = $('.timeslots-block');
                                    $timeslotsBlock.on("click", function () {
                                        console.log('Timeslots switched!');
                                        $timeslotsBlock.removeClass('timeslots-selected');
                                        $('.timeslots-input').prop('checked', false);
                                        $(this).find('.timeslots-input').prop('checked', true);
                                        $(this).addClass('timeslots-selected');
                                    });
                                    $('.timeslots-input:first').attr('checked', true);
                                    $timeslotsBlock.first().addClass('timeslots-selected');
                                    $timeslotsSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                    $timeslotsForm.show();
                                }, error: function (MLHttpRequest) {
                                    let response = MLHttpRequest.responseJSON;
                                    $availabilityCheckErrorMessage.html(response.message + _parseValidationErrors(response)).addClass('error').show();
                                },
                                beforeSend: function () {
                                    $availabilityCheckErrorMessage.html('').removeClass('error success').hide();
                                    $availabilityCheckSubmitButton.addClass('updating-icon');
                                    $noOpeningFormSubmitButton.addClass('updating-icon');
                                },
                                complete: function () {
                                    $availabilityCheckSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                    $noOpeningFormSubmitButton.removeClass('updating-icon').attr('disabled', false);
                                }
                            });
                        }
                    }
                }, error: function (MLHttpRequest) {
                    $('.' + $contact.hackerspaceId).attr('selected', true);
                    $hackerspaceName.html($contact.hackerspace);
                    localStorage.removeItem('gomycode-availability-data');
                    $gomycodeAvailabilityData = null;
                    let response = MLHttpRequest.responseJSON;
                    $availabilityCheckErrorMessage.html(response.errorMessage).addClass('error').show();
                    $availabilityCheckSubmitButton.removeClass('updating-icon').attr('disabled', false);
                    $noOpeningFormSubmitButton.removeClass('updating-icon').attr('disabled', false);
                },
                beforeSend: function () {
                    $availabilityCheckErrorMessage.html('').removeClass('error success').hide();
                    $availabilityCheckSubmitButton.addClass('updating-icon');
                    $noOpeningFormSubmitButton.addClass('updating-icon');
                }
            });
        }

        function gomycodeAvailabilityCreateDeal() {
            $timeslotsSubmitButton.show();
            if ($timeslotsSubmitButton.attr('disabled') === true) {
                return false;
            }
            $timeslotsSubmitButton.attr('disabled', true);
            $.ajax({
                url: $restBaseApi + "/create-deal",
                type: 'POST',
                cache: false,
                dataType: 'json',
                data: {
                    "contact": $contact,
                    "availability": $gomycodeAvailabilityData,
                    "track": deparam($addToCartForm.serialize()),
                    "session": $('.timeslots-block input:checked').data()
                },
                success: function () {
                    $addToCartForm.find('.track_id').remove();
                    localStorage.removeItem('gomycode-availability-data');
                    _closePopup();
                }, error: function (MLHttpRequest) {
                    let response = MLHttpRequest.responseJSON;
                    $timeslotsErrorMessage.html(response.message + _parseValidationErrors(response)).addClass('error').show();
                    $timeslotsSubmitButton.removeClass('updating-icon').attr('disabled', false);
                },
                beforeSend: function () {
                    $timeslotsErrorMessage.html('').removeClass('error success').hide();
                    $timeslotsSubmitButton.addClass('updating-icon');
                }
            });
        }

        function gomycodeAvailabilityGoToCheckout() {
            $timeslotsSubmitButton.show();
            if ($timeslotsSubmitButton.attr('disabled') === true) {
                return false;
            }
            $timeslotsSubmitButton.attr('disabled', true);
            $.ajax({
                url: $restBaseApi + "/add-to-cart",
                type: 'POST',
                cache: false,
                dataType: 'json',
                data: {
                    "contact": $contact,
                    "availability": $gomycodeAvailabilityData,
                    "track": deparam($addToCartForm.serialize()),
                    "session": $('.timeslots-block input:checked').data()
                },
                success: function () {
                    window.location.href = baseUrl + "/checkout";
                }, error: function (MLHttpRequest) {
                    let response = MLHttpRequest.responseJSON;
                    $timeslotsErrorMessage.html(response.message + _parseValidationErrors(response)).addClass('error').show();
                    $timeslotsSubmitButton.removeClass('updating-icon').attr('disabled', false);
                },
                beforeSend: function () {
                    $timeslotsErrorMessage.html('').removeClass('error success').hide();
                    $timeslotsSubmitButton.addClass('updating-icon');
                }
            });
        }

        function handlerAvailabilityChecker() {
            if ($popupAvailabilityChecker.hasClass('popup-loaded')) {
                $popupAvailabilityChecker.EdumallPopup('open');
            } else {
                gomycodeAvailabilitySignup();
            }
        }
    });
}(jQuery));
